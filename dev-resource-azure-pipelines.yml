variables:
 - group : terraformvariables

trigger:
  branches:
   include:
   - master

pr: none

pool:
  vmImage: ubuntu-latest

steps:
    - checkout: self

    - task: TerraformCLI@0
      inputs:
      command: 'init'
      backendType: 'azurerm'
      backendServiceArm: 'Azure resource'
      ensureBackend: true
      backendAzureRmResourceGroupName: '$(backendrgname)'
      backendAzureRmResourceGroupLocation: '$( backendrglocation)'
      backendAzureRmStorageAccountName: '$(storageaccountname)'
      backendAzureRmContainerName: '$(devstoragecontainername)'
      backendAzureRmKey: '$(devblobkey)'
      allowTelemetryCollection: true'
      
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      inputs:
        terraformVersion: 'latest'
    
    

    - task: TerraformTaskV3@3
      inputs:
       provider: 'azurerm'
       command: 'init'
       backendServiceArm: 'Azure resource'
       backendAzureRmResourceGroupName: '$(backendrgname)'
       backendAzureRmStorageAccountName: '$(storageaccountname)'
       backendAzureRmContainerName: '$(devstoragecontainername)'
       backendAzureRmKey: '$(devblobkey)'

    - task: TerraformTaskV3@3
      inputs:
        provider: 'azurerm'
        command: 'validate'
    
    - task: TerraformTaskV3@3
      inputs:
        provider: 'azurerm'
        command: 'plan'
        commandOptions: '-input=false -var-file="$(System.DefaultWorkingDirectory)/dev/dev.tfvars"'
        environmentServiceNameAzureRM: 'Azure resource'

    - task: TerraformTaskV3@3
      inputs:
        provider: 'azurerm'
        command: 'destroy'
        commandOptions: '-input=false -var-file="$(System.DefaultWorkingDirectory)/dev/dev.tfvars"'
        environmentServiceNameAzureRM: 'Azure resource'

