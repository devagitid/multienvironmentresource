variables:
 - group : terraformvariables

trigger:
        branches:
          include:
            - master

pr: none

stages :
  - stage: validate
    jobs:
    - job: validate
      continueOnError: false
      steps:
      - task: TerraformInstaller@0
        displayName: 'install'
        inputs:
          terraformVersion: '0.13.3'
      - task: TerraformTaskV1@0
        displayName: 'init'
        inputs:
          provider: 'azurerm'
          command: 'init'
          backendServiceArm: 'Azure resource'
          backendAzureRmResourceGroupName: $(backendrgname)
          backendAzureRmStorageAccountName: '$(storageaccountname)'
          backendAzureRmContainerName: '$(storagecontainername)'
          backendAzureRmKey: '$(blobkey)'
          workingDirectory: '$(System.DefaultWorkingDirectory)'
      - task: TerraformTaskV1@0
        displayName: 'validate'
        inputs:
          provider: 'azurerm'
          command: 'validate'
           
  - stage: plan
    dependsOn: [validate]
    condition: succeeded('validate')
    jobs:
      - job: terraform_apply
        steps:
              - checkout: self
              - task: TerraformInstaller@0
                displayName: 'install'
                inputs:
                  terraformVersion: '0.13.3'
              - task: TerraformTaskV1@0
                displayName: 'init'
                inputs:
                  provider: 'azurerm'
                  command: 'init'
                  backendServiceArm: 'Azure resource'
                  backendAzureRmResourceGroupName: $(backendrgname)
                  backendAzureRmStorageAccountName: '$(storageaccountname)'
                  backendAzureRmContainerName: '$(storagecontainername)'
                  backendAzureRmKey: '$(blobkey)'
                  workingDirectory: '$(System.DefaultWorkingDirectory)'
              - task: TerraformTaskV1@0
                displayName: 'plan'
                inputs:
                  provider: 'azurerm'
                  command: 'plan'
                  commandOptions: '-input=false -var-file="$(System.DefaultWorkingDirectory)/dev/dev.tfvars"'
                  environmentServiceNameAzureRM: 'Azure resource'
                  workingDirectory: '$(System.DefaultWorkingDirectory)'
 
  - stage: apply
    dependsOn: [plan]
    condition: succeeded('plan')
    jobs:
      - job: terraform_plan
        steps:
              - checkout: self
              - task: TerraformInstaller@0
                displayName: 'install'
                inputs:
                  terraformVersion: '0.13.3'
              - task: TerraformTaskV1@0
                displayName: 'init'
                inputs:
                  provider: 'azurerm'
                  command: 'init'
                  backendServiceArm: 'Azure resource'
                  backendAzureRmResourceGroupName: $(backendrgname)
                  backendAzureRmStorageAccountName: '$(storageaccountname)'
                  backendAzureRmContainerName: '$(storagecontainername)'
                  backendAzureRmKey: '$(blobkey)'
                  workingDirectory: '$(System.DefaultWorkingDirectory)'
              - task: TerraformTaskV1@0
                displayName: 'plan'
                inputs:
                  provider: 'azurerm'
                  command: 'plan'
                  commandOptions: '-input=false -var-file="$(System.DefaultWorkingDirectory)/dev/dev.tfvars"'
                  environmentServiceNameAzureRM: 'Azure resource'
                  workingDirectory: '$(System.DefaultWorkingDirectory)'
              - task: TerraformTaskV1@0
                displayName: 'apply'
                inputs:
                  provider: 'azurerm'
                  command: 'apply'
                  commandOptions: '-input=false -auto-approve -var-file="$(System.DefaultWorkingDirectory)/dev/dev.tfvars"'
                  environmentServiceNameAzureRM: 'Azure resource'
                  workingDirectory: '$(System.DefaultWorkingDirectory)'


